knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv",
col_types = cols(X1 = col_skip(), X2 = col_character(),
X3 = col_number(), X4 = col_skip(),
X5 = col_skip(), X6 = col_skip(),
X7 = col_skip()))
View(data)
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv", header = true)
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv", sep=',')
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv")
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv")
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv",
col_types = cols(X1 = col_number(), X2 = col_number()))
View(data)
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv",
col_types = cols(X3 = col_skip(), X4 = col_skip(),
X5 = col_skip(), X6 = col_skip(),
X7 = col_skip()))
View(data)
library(readr)
> data <- read_csv("DerekOlson/CS6012/assignment03/data.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
data <- read_csv("DerekOlson/CS6012/assignment03/data.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(data)<-c("size", "time")
View(data)
plot(data[1], data[2])
plot(data[1], data[2], p)
plot(data[1], data[2], type="p")
plot(data[1], data[2], type="p")
plot(data$size, data$time, type="p")
#word sorting
dfWords <- data[1:4,]
plot(dfWords$size, dfWords$time, type="p")
#word sorting
dfAnagrams <- data[5:9,]
plot(dfAnagrams$size, dfAnagrams$time, type="p")
plot(dfWords$size, dfWords$time, type="l")
plot(dfAnagrams$size, dfAnagrams$time, type="l")
anagramData = log(dfAnagrams)
plot(dfAnagrams$size, dfAnagrams$time, type="l")
#word sorting
dfAnagrams <- data[5:9,]
plot(dfAnagrams$size, dfAnagrams$time, type="l")
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
View(data)
colnames(data)<-c("size", "time")
View(data)
#word sorting
plot(data$size, data$time, type="l")
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(data)<-c("size", "time")
View(data)
#word sorting
plot(data$size, data$time, type="l")
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
#word sorting
plot(data$size, data$time, type="l")
# add a title and subtitle
title("Word Sorting", "log transformed")
# add a legend
legend(xrange[1], yrange[2], 1:ntrees, cex=0.8, col=colors,
pch=plotchar, lty=linetype, title="Word Sorting")
# add a title and subtitle
title("Word Sorting: log transformed")
#word sorting
plot(data$size, data$time, type="l")
# add a title and subtitle
title("Word Sorting: log transformed")
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
title("Word Sorting)
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
#word sorting
anagram_data <- read_csv("DerekOlson/CS6012/assignment03/anagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
dfAnagrams <- data[5:9,]
plot(dfAnagrams$size, dfAnagrams$time, type="l")
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
title("Word Sorting)
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
#word sorting
anagram_data <- read_csv("DerekOlson/CS6012/assignment03/anagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
dfAnagrams <- data[5:9,]
plot(dfAnagrams$size, dfAnagrams$time, type="l")
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
View(anagram_data)
title("Word Sorting)
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
#word sorting
anagram_data <- read_csv("DerekOlson/CS6012/assignment03/anagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(anagram_data)<-c("size", "time")
View(anagram_data)
plot(anagram_data$size, anagram_data$time, type="l")
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(data)<-c("size", "time")
View(data)
#word sorting
plot(data$size, data$time, type="l")
title("Word Sorting)
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
#word sorting
anagram_data <- read_csv("DerekOlson/CS6012/assignment03/anagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(anagram_data)<-c("size", "time")
View(anagram_data)
plot(anagram_data$size, anagram_data$time, type="l")
title("Anagram Groups")
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
plot(data$size, data$time, type="l")
title("Word Sorting)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
#word sorting
plot(data$size, data$time, type="l")
title("Word Sorting)
title("Word Sorting)
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
#word sorting
anagram_data <- read_csv("DerekOlson/CS6012/assignment03/anagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(anagram_data)<-c("size", "time")
View(anagram_data)
plot(anagram_data$size, anagram_data$time, type="l")
title("Anagram Groups")
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
title("Anagram Groups: log transformed")
#word sorting
plot(data$size, data$time, type="l")
title("Word Sorting")
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(data)<-c("size", "time")
View(data)
#word sorting
plot(data$size, data$time, type="l")
title("Word Sorting")
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
#word sorting
anagram_data <- read_csv("DerekOlson/CS6012/assignment03/anagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(anagram_data)<-c("size", "time")
View(anagram_data)
plot(anagram_data$size, anagram_data$time, type="l")
title("Anagram Groups")
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
title("Anagram Groups: log transformed")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv")
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(data)<-c("size", "time")
colnames(data)<-c("size", "time")
plot(data$size, data$time, type="l", echo=FALSE)
title("Word Sorting")
plot(data$size, data$time, type="l")
title("Word Sorting")
wordSortingData = log(data)
plot(wordSortingData$size, wordSortingData$time, type = "l")
title("Word Sorting: log transformed")
anagram_data <- read_csv("DerekOlson/CS6012/assignment03/anagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(anagram_data)<-c("size", "time")
plot(anagram_data$size, anagram_data$time, type="l")
title("Anagram Groups")
anagramData = log(dfAnagrams)
anagramData = log(dfAnagrams)
plot(anagramData$size, anagramData$time, type="l")
title("Anagram Groups: log transformed")
areAnagrams_data <- read_csv("DerekOlson/CS6012/assignment03/areAnagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(anagram_data)<-c("size", "time")
View(areAnagrams_data)
areAnagrams_data <- read_csv("DerekOlson/CS6012/assignment03/areAnagrams.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
colnames(anagram_data)<-c("size", "time")
View(anagram_data)
View(anagram_data)
View(areAnagrams_data)
View(areAnagrams_data)
View(areAnagrams_data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
library(readr)
data <- read_csv("DerekOlson/CS6012/assignment03/word_sorting.csv", col_types = cols(X3 = col_skip(), X4 = col_skip(), X5 = col_skip(), X6 = col_skip(), X7 = col_skip()))
library(readr)
data <- read_csv("DerekOlson/CS6012/lab05/times.csv")
View(data)
data <- read_csv("DerekOlson/CS6012/lab05/times.csv", col_names = FALSE)
View(data)
colnames(data) = c("size", "time")
View(data)
View(data)
plot(data$size, data$time, type = "l")
plot(data$size, data$time, type = "l")
lm(data$size, data$time)
lm(data$size~ data$time)
model = lm(data$size~ data$time)
summary(model)
plot(model)
View(data)
```
data <- read_csv("DerekOlson/CS6012/lab05/times.csv", col_names = FALSE)
```
---
title: "lab05"
author: "Derek Olson"
date: "11/13/2019"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
Question 1:
From an implementation perspective it would have been more efficient to back the sorted set with a Java list. This is due to the fact that Java Lists are part of the standard library and have methods already defined.This makes Java lists more flexible to work with.
However, arrays more efficienlty perform get and set operations. In many instances this performace gain may only be in the realm of nanoseconds.
Question 2:
I expect the contains function to have a Big-O behavior of logN as the sorted set allows for a binary search to determine if the element is contained or not. The binary search uses the sorted nature of the set to systematically drop (not search) large chunks of the set.
```{r}
data <- read_csv("DerekOlson/CS6012/lab05/times.csv", col_names = FALSE)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("DerekOlson/CS6012/lab05/times.csv", col_names = FALSE)
data <- read_csv("DerekOlson/CS6012/lab05/timesContains.csv", col_names = FALSE)
data <- read_csv("users/derekolson/DerekOlson/CS6012/lab05/timesContains.csv", col_names = FALSE)
data <- read_csv("Users/derekolson/DerekOlson/CS6012/lab05/timesContains.csv", col_names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("Users/derekolson/DerekOlson/CS6012/lab05/timesContains.csv", col_names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
data <- read_csv("Users/derekolson/DerekOlson/CS6012/lab05/timesContains.csv", col_names = FALSE)
library(readr)
data <- read_csv("Users/derekolson/DerekOlson/CS6012/lab05/timesContains.csv", col_names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
data <- read_csv("DerekOlson/CS6012/lab05/timesContains.csv", col_names = FALSE)
library(readr)
data <- read_csv("timesContains.csv", col_names = FALSE)
View(data)
library(readr)
data <- read_csv("timesContains.csv", col_names = TRUE)
View(data)
plot(data$Size, data$Time, type = "l")
View(data)
View(data)
data['log_size'] = log2(data$Size)
data['log_size'] = log2(data$Size)
data['log_time'] = log2(data$Time)
plot(data$log_size, data$log_time, type = "l", log="xy")
plot(data$Size, data$log_time, type = "l", log="xy")
plot(data$log_time, data$Size, type = "l", log="xy")
plot(data$log_time, data$log_size, type = "l", log="xy")
plot(data$log_size, data$log_time, type = "l", log="xy")
knitr::opts_chunk$set(echo = TRUE)
#Question 3:
library(readr)
data <- read_csv("timesContains.csv", col_names = TRUE)
plot(data$Size, data$Time, type = "l")
data <- read_csv("timesContains.csv", col_names = TRUE)
View(data)
View(data)
#Question 3:
library(readr)
data <- read_csv("timesContains.csv", col_names = FALSE)
colnames(data) = c("Size", "Time")
plot(data$Size, data$Time, type = "l")
#Question 3:
library(readr)
data <- read_csv("timesContains.csv", col_names = FALSE)
colnames(data) = c("Size", "Time")
plot(data$Size, data$Time, type = "l")
data <- read_csv("timesAdd.csv", col_names = FALSE)
colnames(data) = c("Size", "Time")
plot(data$Size, data$Time, type = "l")
data_add['log_size'] = log2(data$Size)
data_add <- read_csv("timesAdd.csv", col_names = FALSE)
colnames(data_add) = c("Size", "Time")
plot(data_add$Size, data_add$Time, type = "l")
data_add['log_size'] = log2(data$Size)
data_add['log_time'] = log2(data$Time)
plot(data_add$log_size, data_add$log_time, type = "l", log="xy")
knitr::opts_chunk$set(echo = TRUE)
#Question 3:
library(readr)
data <- read_csv("timesContains.csv", col_names = FALSE)
colnames(data) = c("Size", "Time")
plot(data$Size, data$Time, type = "l")
model = lm(data$Time ~ data$Size)
summary(model)
plot(model)
data['log_size'] = log2(data$Size)
data['log_time'] = log2(data$Time)
plot(data$log_size, data$log_time, type = "l", log="xy")
data_add <- read_csv("timesAdd.csv", col_names = FALSE)
colnames(data_add) = c("Size", "Time")
plot(data_add$Size, data_add$Time, type = "l")
data_add['log_size'] = log2(data$Size)
knitr::opts_chunk$set(echo = TRUE)
#Question 3:
library(readr)
data <- read_csv("timesContains.csv", col_names = FALSE)
colnames(data) = c("Size", "Time")
plot(data$Size, data$Time, type = "l")
model = lm(data$Time ~ data$Size)
summary(model)
plot(model)
data['log_size'] = log2(data$Size)
data['log_time'] = log2(data$Time)
plot(data$log_size, data$log_time, type = "l", log="xy")
data_add <- read_csv("timesAdd.csv", col_names = FALSE)
colnames(data_add) = c("Size", "Time")
plot(data_add$Size, data_add$Time, type = "l")
data_add['log_size'] = log2(data_add$Size)
data_add['log_time'] = log2(data_add$Time)
plot(data_add$log_size, data_add$log_time, type = "l", log="xy")
library(readr)
library(ggplot2)
library(lme4)
library(lattice)
setwd("~/DerekOlson/CS6012/assignment06")
data <- read_csv("hash_functor_timing.csv", col_names = T)
ggplot(thresholdData)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time vs set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")+labs(fill = "Functor")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
sp+labs(fill = "Functor")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
sp+labs(fill = "Functor")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
sp
sp+labs(fill = "Functor")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")+labs(fill = "Functor")
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")+labs(colors = "Functor")
data <- read_csv("hash_functor_timing_collisions.csv", col_names = T)
ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
p<-ggplot(data=data, aes(x=Size, y=Collisions)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
p
p<-ggplot(data=data, aes(x=data$Size, y=data$Collisions)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
p
View(data)
p<-ggplot(data, aes(x=Size, y=Collisions, color=Method)) +
geom_bar(stat="identity", fill="white")
p
p<-ggplot(data, aes(x=Method, y=Collisions, color=Size)) +
geom_bar(stat="identity", fill="white")
p
p<-ggplot(data, aes(x=Method, y=Collisions, color=Size)) +
geom_bar(stat="identity")
p
p<-ggplot(data, aes(x=Method, y=Collisions)) +
geom_bar(stat="identity")
p
p<-ggplot(data, aes(x=Size, y=Collisions, color=Method)) +
geom_bar(stat="identity", fill="white")
p
p<-ggplot(data, aes(x=Size, y=Collisions, color=Method)) +
geom_bar()
p
p<-ggplot(data, aes(x=Size, y=Collisions, color=Method)) +
geom_bar(stat="identity")
p
data <- read_csv("hash_functor_timing_collisions.csv", col_names = T)
ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp = ggplot(data)+geom_line(aes(x=data$Size, y=data$Time, color = data$Method))
sp + ggtitle("Run time versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Time (nanoseconds)")
p = ggplot(data)+geom_line(aes(x=data$Size, y=data$Collisions, color = data$Method))
p + ggtitle("Collisions versus set size for 100,000 random strings") +
xlab("Set Size") + ylab("Collisions")
