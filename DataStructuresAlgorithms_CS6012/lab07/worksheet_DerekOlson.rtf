{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww12540\viewh15020\viewkind1
\deftab720
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\ri0\partightenfactor0

\f0\fs24 \cf0 Lab 7 Worksheet\
\
Answer the following questions by modifying this text file. Add your answer below each question.\
\
1. List one property of a RNG that CheckRandomNumberGenerator measures and give a reason why you think that this is an important property.\
\
The  class checks how many tries before all the numbers between 1 and 1000 are generated. This is important in understanding biases in an algorithm related to the constant values and the propensity to generate specific outcomes while not encountering others. If over and under abundances of events of specific types are occurring then it is likely that the algorithm is not a good one. \
\
\
2. It takes a lot longer to generate ten million random numbers using JavasRandomNumberGenerator than using PoorRandomNumberGenerator. Why?\
\
Java\'92s random number generator is actually generating random numbers while the poor random number generator just returns a constant value of 1. \
\
3. The "Number of Zeros after 10000 tries" refers to the number of integers between 0 and 10000 (exclusive) that were not generated in 10000 tries. For PoorRandomNumberGenerator this value is 9999. Why?\
\
The poor random generator only returns 1 values. \
\
4. What does the number of integers between 0 and 10000 (exclusive) that were not generated in 10000 tries tell us about the RNG? Does JavasRandomNumberGenerator generate every integer between 0 and 10000 (exclusive) in 10000 tries?\
\
It tells us about the likelihood of a given value being chosen. If many values are never chosen then the likelihood of other values being chosen is higher. This is non-random behavior. Javas random number generator does not generate every random number.\
\
5. The "Number of odd_even pairs" refers to the number of times an odd number is followed by an even number in the generated sequence of integers. What is a good value for this number?\
\
A good value would be about 25% of the random numbers generated, or 2,500 in this case. \
\
Because the algorithm uses the mod function it is an indicator that there is less bias in the values that are being used to generate the random numbers. Consistently odd or even numbers would indicate that there is a high (non-random) liklihood that even or odd values are being used.\
\
6. CheckRandomNumberGenerator checks that given the same seed, the RNG produces the same sequence of integers. What is an advantage of this behavior? What is a disadvantage?\
\
The advantage is that testing algorithms can use these pseudo random sequences over and over without having to verify the order of the sequence,  which makes repeated testing of average cases much simpler and faster. The disadvantage is that there is even less true randomness in the algorithm. Also if the data generated is bad than the testing could be bad. \
\
\
7. For what properties did your RNG perform better than PoorRandomNumberGenerator?\
I\'92m getting a better distribution of types of pairs and fewer zeros after 10,000 tries\
\
8. Why are RNGs that use computational algorithms considered "pseudorandom"? \
They are pseudorandom because they are completely determined by the initial values, specifically the seed. \
\
}